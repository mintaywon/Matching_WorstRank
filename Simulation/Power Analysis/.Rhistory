HR = c(1.00, 1.01, 1.02, 1.03, 1.04, 1.05, 1.06, 1.07, 1.08, 1.09, 1.10, 1.11, 1.12, 1.13, 1.14, 1.15, 1.16, 1.17, 1.18, 1.19, 1.20)
HR = c(1.00, 1.01, 1.02, 1.03, 1.04, 1.05, 1.06, 1.07, 1.08, 1.09, 1.10, 1.11, 1.12, 1.13, 1.14, 1.15, 1.16, 1.17, 1.18, 1.19, 1.20)
HR
#Define parameters
Delta = c(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6)
q2 = c(0.6, 0.8, 0.9)
HR = c(1.00, 1.01, 1.02, 1.03, 1.04, 1.05, 1.06, 1.07, 1.08, 1.09, 1.10, 1.11, 1.12, 1.13, 1.14, 1.15, 1.16, 1.17, 1.18, 1.19, 1.20)
time = 3
N = 5000
n = 50
rho_X = 0.8
rho_t = 0.8
alpha = 0.05
power.exp.grid = array(data = NA, dim = c(2, length(q2), length(Delta), length(HR)),
dimnames = list(c("Paired Worst rank", "Survivors-only"),
c("q2=60%", "q2=80%", "q2=90%"),
c(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6),
c(1.00, 1.01, 1.02, 1.03, 1.04, 1.05, 1.06, 1.07, 1.08, 1.09, 1.10, 1.11, 1.12, 1.13, 1.14, 1.15, 1.16, 1.17, 1.18, 1.19, 1.20)))
setwd("../")
getwd()
setwd("..")
getwd()
setwd("C:/Users/MIN/OneDrive - SNU/문서/GitHub/Matching_WorstRank/Simulation/")
getwd()
setwd("C:/Users/MIN/OneDrive - SNU/문서/GitHub/Matching_WorstRank/Simulation")
#install.packages("nnls") #install before download lcmix
#install.packages("lcmix", repos="http://R-Forge.R-project.org")
#install.packages("flexsurv")
#library(lcmix)
library(combinat)
library(flexsurv)
library(gtools)
setwd("C:/Users/MIN/OneDrive - SNU/문서/GitHub/Matching_WorstRank/Simulation")
getwd()
source("mvfunctions.R")
#install.packages("nnls") #install before download lcmix
#install.packages("lcmix", repos="http://R-Forge.R-project.org")
#install.packages("flexsurv")
#library(lcmix)
library(combinat)
library(flexsurv)
library(gtools)
setwd("C:/Users/MIN/OneDrive - SNU/문서/GitHub/Matching_WorstRank/Simulation")
getwd()
source("mvfunctions.R")
#install.packages("nnls") #install before download lcmix
#install.packages("lcmix", repos="http://R-Forge.R-project.org")
#install.packages("flexsurv")
#library(lcmix)
library(combinat)
library(flexsurv)
library(gtools)
#setwd("C:/Users/MIN/OneDrive - SNU/문서/GitHub/Matching_WorstRank/Simulation")
getwd()
source("mvfunctions.R")
#install.packages("nnls") #install before download lcmix
#install.packages("lcmix", repos="http://R-Forge.R-project.org")
#install.packages("flexsurv")
#library(lcmix)
library(combinat)
library(flexsurv)
library(gtools)
source("C:/Users/MIN/OneDrive - SNU/문서/GitHub/Matching_WorstRank/Simulation/mvfunctions.R")
#Define parameters
Delta = c(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6)
q2 = c(0.6, 0.8, 0.9)
HR = c(1.00, 1.01, 1.02, 1.03, 1.04, 1.05, 1.06, 1.07, 1.08, 1.09, 1.10, 1.11, 1.12, 1.13, 1.14, 1.15, 1.16, 1.17, 1.18, 1.19, 1.20)
time = 3
N = 5000
n = 50
rho_X = 0.8
rho_t = 0.8
alpha = 0.05
power.exp.grid = array(data = NA, dim = c(2, length(q2), length(Delta), length(HR)),
dimnames = list(c("Paired Worst rank", "Survivors-only"),
c("q2=60%", "q2=80%", "q2=90%"),
c(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6),
c(1.00, 1.01, 1.02, 1.03, 1.04, 1.05, 1.06, 1.07, 1.08, 1.09, 1.10, 1.11, 1.12, 1.13, 1.14, 1.15, 1.16, 1.17, 1.18, 1.19, 1.20)))
set.seed(123)
for (i in 1:length(q2)) {
for (j in 1:length(Delta)) {
for (k in 1:length(HR)) {
cat("q2 value: ",q2[i], ", ")
cat("Delta value: ",Delta[j], ", ")
cat("HR value: ",HR[k], "\n")
count_wsr=0
count_wmw=0
count_survivor = 0
total = 0
for (l in c(1:N)){
wsr_tests = simulate_exp(n, q2[i], HR[k], Delta[j], time, rho_X, rho_t)
wsr_p = wsr_tests[1]
wsr_survivor_p = wsr_tests[3]
if (wsr_p == -1) break;
if (wsr_p <= 0.05){
count_wsr = count_wsr + 1
}
if (wsr_survivor_p <= 0.05){
count_survivor = count_survivor + 1
}
total = total + 1
}
power.exp.grid[1, i, j, k] = round(count_wsr/total, 3)
power.exp.grid[2, i, j, k] = round(count_survivor/total, 3)
}
}
}
getwd()
wsr_q2low_grid = power.exp.grid[1,1,,]
wsr_q2mid_grid = power.exp.grid[1,2,,]
wsr_q2high_grid = power.exp.grid[1,3,,]
survivoronly_q2low_grid = power.exp.grid[2,1,,]
survivoronly_q2mid_grid = power.exp.grid[2,2,,]
survivoronly_q2high_grid = power.exp.grid[2,3,,]
diffwsrsurvivor_q2low_grid = wsr_q2low_grid - survivoronly_q2low_grid
diffwsrsurvivor_q2mid_grid = wsr_q2mid_grid - survivoronly_q2mid_grid
diffwsrsurvivor_q2high_grid = wsr_q2high_grid - survivoronly_q2high_grid
cat("Wilcoxon signed worst-rank simulation power, rows are Delta, cols are HR, q2 = 0.6\n")
wsr_q2low_grid
cat("\nWilcoxon signed worst-rank simulation power, rows are Delta, cols are HR, q2 = 0.8\n")
wsr_q2mid_grid
cat("\nWilcoxon signed worst-rank simulation power, rows are Delta, cols are HR, q2 = 0.9\n")
wsr_q2high_grid
cat("\nsurvivors only simulation power, rows are Delta, cols are HR, q2 = 0.6\n")
survivoronly_q2low_grid
cat("\nsurvivors only simulation power, rows are Delta, cols are HR, q2 = 0.8\n")
survivoronly_q2mid_grid
cat("\nsurvivors only simulation power, rows are Delta, cols are HR, q2 = 0.9\n")
survivoronly_q2high_grid
cat("\ndifference between WSR and survivor only, q2 = 0.6\n")
diffwsrsurvivor_q2low_grid
cat("\ndifference between WSR and survivor only, q2 = 0.8\n")
diffwsrsurvivor_q2mid_grid
cat("\ndifference between WSR and survivor only, q2 = 0.9\n")
diffwsrsurvivor_q2high_grid
write.csv(diffwsrsurvivor_q2low_grid,"tables/diffwsrsurvivor_q2low_grid.csv")
diffwsrsurvivor_q2low_grid
write.csv(alpha, "tables/alpha.csv")
write.csv(diffwsrsurvivor_q2low_grid,"tables/diffwsrsurvivor_q2low_grid.csv")
write.csv(diffwsrsurvivor_q2low_grid,"tables/diffwsrsur_q2low_grid.csv")
write.csv(diffwsrsurvivor_q2mid_grid,"tables/diffwsrsur_q2mid_grid.csv")
write.csv(diffwsrsurvivor_q2high_grid,"tables/diffwsrsur_q2high_grid.csv")
write.csv(diffwsrsurvivor_q2low_grid,"tables/diffwsrsuasdfasdfsdfr_q2low_grid.csv")
#install.packages("nnls") #install before download lcmix
#install.packages("lcmix", repos="http://R-Forge.R-project.org")
#install.packages("flexsurv")
#library(lcmix)
library(combinat)
library(flexsurv)
library(gtools)
source("C:/Users/MIN/OneDrive - SNU/문서/GitHub/Matching_WorstRank/Simulation/mvfunctions.R")
#install.packages("nnls") #install before download lcmix
#install.packages("lcmix", repos="http://R-Forge.R-project.org")
#install.packages("flexsurv")
#library(lcmix)
library(combinat)
library(flexsurv)
library(gtools)
source("C:/Users/MIN/OneDrive - SNU/문서/GitHub/Matching_WorstRank/Simulation/mvfunctions.R")
#install.packages("nnls") #install before download lcmix
#install.packages("lcmix", repos="http://R-Forge.R-project.org")
#install.packages("flexsurv")
#library(lcmix)
library(combinat)
library(flexsurv)
library(gtools)
source("C:/Users/MIN/OneDrive - SNU/문서/GitHub/Matching_WorstRank/Simulation/mvfunctions.R")
#Define parameters
Delta = c(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6)
q2 = c(0.6, 0.8, 0.9)
HR = c(1.0, 1.2, 1.4, 1.6, 2.0, 2.4, 3.0)
time = 3
N = 5000
n = 50
rho_X = 0.8
rho_t = 0.8
alpha = 0.05
power.exp = array(data = NA, dim = c(3, length(q2), length(Delta), length(HR)),
dimnames = list(c("Paired Worst rank", "Non-paired Worst rank", "Survivors-only"),
c("q2=60%", "q2=80%", "q2=90%"),
c(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6),
c(1.0, 1.2, 1.4, 1.6, 2.0, 2.4, 3.0)))
set.seed(123)
for (i in 1:length(q2)) {
for (j in 1:length(Delta)) {
print(Delta[j])
for (k in 1:length(HR)) {
cat("q2 value: ",q2[i], ", ")
cat("Delta value: ",Delta[j], ", ")
cat("HR value: ",HR[k], "\n")
count_wsr=0
count_wmw=0
count_survivor = 0
total = 0
for (l in c(1:N)){
wsr_tests = simulate_exp(n, q2[i], HR[k], Delta[j], time, rho_X, rho_t)
wsr_p = wsr_tests[1]
wmw_p = wsr_tests[2]
wsr_survivor_p = wsr_tests[3]
if (wsr_p == -1) break;
if (wsr_p <= 0.05){
count_wsr = count_wsr + 1
}
if (wmw_p <= 0.05){
count_wmw = count_wmw +1
}
if (wsr_survivor_p <= 0.05){
count_survivor = count_survivor + 1
}
total = total + 1
}
power.exp[1, i, j, k] = round(count_wsr/total, 3)
power.exp[2, i, j, k] = round(count_wmw/total, 3)
power.exp[3, i, j, k] = round(count_survivor/total, 3)
}
}
}
set.seed(123)
for (i in 1:length(q2)) {
for (j in 1:length(Delta)) {
print(Delta[j])
for (k in 1:length(HR)) {
cat("q2 value: ",q2[i], ", ")
cat("Delta value: ",Delta[j], ", ")
cat("HR value: ",HR[k], "\n")
count_wsr=0
count_wmw=0
count_survivor = 0
total = 0
for (l in c(1:N)){
wsr_tests = simulate_exp(n, q2[i], HR[k], Delta[j], time, rho_X, rho_t)
wsr_p = wsr_tests[1]
wmw_p = wsr_tests[2]
wsr_survivor_p = wsr_tests[3]
if (wsr_p == -1) break;
if (wsr_p <= 0.05){
count_wsr = count_wsr + 1
}
if (wmw_p <= 0.05){
count_wmw = count_wmw +1
}
if (wsr_survivor_p <= 0.05){
count_survivor = count_survivor + 1
}
total = total + 1
}
power.exp[1, i, j, k] = round(count_wsr/total, 3)
power.exp[2, i, j, k] = round(count_wmw/total, 3)
power.exp[3, i, j, k] = round(count_survivor/total, 3)
}
}
}
set.seed(123)
for (i in 1:length(q2)) {
for (j in 1:length(Delta)) {
print(Delta[j])
for (k in 1:length(HR)) {
cat("q2 value: ",q2[i], ", ")
cat("Delta value: ",Delta[j], ", ")
cat("HR value: ",HR[k], "\n")
count_wsr=0
count_wmw=0
count_survivor = 0
total = 0
for (l in c(1:N)){
wsr_tests = simulate_exp(n, q2[i], HR[k], Delta[j], time, rho_X, rho_t)
wsr_p = wsr_tests[1]
wmw_p = wsr_tests[2]
wsr_survivor_p = wsr_tests[3]
if (wsr_p == -1) break;
if (wsr_p <= 0.05){
count_wsr = count_wsr + 1
}
if (wmw_p <= 0.05){
count_wmw = count_wmw +1
}
if (wsr_survivor_p <= 0.05){
count_survivor = count_survivor + 1
}
total = total + 1
}
power.exp[1, i, j, k] = round(count_wsr/total, 3)
power.exp[2, i, j, k] = round(count_wmw/total, 3)
power.exp[3, i, j, k] = round(count_survivor/total, 3)
}
}
}
wsr_q2low = power.exp[1,1,,]
wsr_q2mid = power.exp[1,2,,]
wsr_q2high = power.exp[1,3,,]
wmw_q2low = power.exp[2,1,,]
wmw_q2mid = power.exp[2,2,,]
wmw_q2high = power.exp[2,3,,]
survivoronly_q2low = power.exp[3,1,,]
survivoronly_q2mid = power.exp[3,2,,]
survivoronly_q2high = power.exp[3,3,,]
diffwsrsur_q2low = wsr_q2low - survivoronly_q2low
diffwsrsur_q2mid = wsr_q2mid - survivoronly_q2mid
diffwsrsur_q2high = wsr_q2high - survivoronly_q2high
cat("Wilcoxon signed worst-rank simulation power, rows are Delta, cols are HR, q2 = 0.6\n")
wsr_q2low
cat("\nWilcoxon signed worst-rank simulation power, rows are Delta, cols are HR, q2 = 0.8\n")
wsr_q2mid
cat("\nWilcoxon signed worst-rank simulation power, rows are Delta, cols are HR, q2 = 0.9\n")
wsr_q2high
cat("\nWilcoxon-Mann-Whitney worst-rank simulation power, rows are Delta, cols are HR, q2 = 0.6\n")
wmw_q2low
cat("\nWilcoxon-Mann-Whitney worst-rank simulation power, rows are Delta, cols are HR, q2 = 0.8\n")
wmw_q2mid
cat("\nWilcoxon-Mann-Whitney worst-rank simulation power, rows are Delta, cols are HR, q2 = 0.9\n")
wmw_q2high
cat("\nsurvivors only simulation power, rows are Delta, cols are HR, q2 = 0.6\n")
survivoronly_q2low
cat("\nsurvivors only simulation power, rows are Delta, cols are HR, q2 = 0.8\n")
survivoronly_q2mid
cat("\nsurvivors only simulation power, rows are Delta, cols are HR, q2 = 0.9\n")
survivoronly_q2high
cat("\ndifference between WSR and survivor only, q2 = 0.6\n")
diffwsrsur_q2low
cat("\ndifference between WSR and survivor only, q2 = 0.8\n")
diffwsrsur_q2mid
cat("\ndifference between WSR and survivor only, q2 = 0.9\n")
diffwsrsur_q2high
Delta = c(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6)
q2 = c(0.6, 0.8, 0.9)
HR = c(1.0, 1.2, 1.4, 1.6, 2.0, 2.4, 3.0)
time = 3
N = 5000
n = 50
rho_X = 0.8
rho_t = 0.8
alpha = 0.05
power.theory.array = array(data = NA, dim = c(length(q2), length(Delta), length(HR)),
dimnames = list(c("q2=60%", "q2=80%", "q2=90%"),
c(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6),
c(1.0, 1.2, 1.4, 1.6, 2.0, 2.4, 3.0)))
n_prob = 1000000
z_alpha = qnorm(1 - alpha)
mu_0 = n * (n+1) / 4
sigma_squared_0 = n * (n+1) * (2*n+1) / 24
for (i in 1:length(q2)) {
for (j in 1:length(Delta)) {
for (k in 1:length(HR)) {
cat("q2[i] : ", q2[i], ", ")
cat("Delta[j] : ", Delta[j], ", ")
cat("HR: ", HR[k], "\n")
probs = simulate_probs_exp(n_prob, q2[i], HR[k], Delta[j], time, rho_X, rho_t)
mu = n * probs[1] + n * (n-1) / 2 * probs[2]
sigma_squared = n * probs[1] * (1-probs[1]) + n * (n-1) / 2 * probs[2] * (1-probs[2]) + 2 * n * (n-1) * (probs[3] - probs[1] * probs[2]) + n * (n-1) * (n-2) * (probs[4] - probs[2]^2)
power_theory = pnorm((-z_alpha * sqrt(sigma_squared_0)+ mu_0 - mu) / sqrt(sigma_squared))
power.theory.array[i, j, k] = power_theory
}
}
}
wsr_q2low_theory = power.theory.array[1,,]
wsr_q2mid_tmeory = power.theory.array[2,,]
wsr_q2high_theory = power.theory.array[3,,]
difftheory_q2low = wsr_q2low - wsr_q2low_theory
difftheory_q2mid = wsr_q2mid - wsr_q2mid_theory
wsr_q2low_theory = power.theory.array[1,,]
wsr_q2mid_theory = power.theory.array[2,,]
wsr_q2high_theory = power.theory.array[3,,]
difftheory_q2low = wsr_q2low - wsr_q2low_theory
difftheory_q2mid = wsr_q2mid - wsr_q2mid_theory
difftheory_q2high = wsr_q2high - wsr_q2high_theory
#### comparison between simulation and theory power of wilcoxon signed worst-rank
cat("Wilcoxon signed worst-rank simulation power - theory power, rows are Delta, cols are HR, q2 = 0.6\n")
difftheory_q2low
cat("Wilcoxon signed worst-rank simulation power - theory power, rows are Delta, cols are HR, q2 = 0.8\n")
difftheory_q2mid
cat("Wilcoxon signed worst-rank simulation power - theory power, rows are Delta, cols are HR, q2 = 0.9\n")
difftheory_q2high
write.csv(wsr_q2low, "tables/wsr_q2low.csv")
write.csv(wsr_q2mid, "tables/wsr_q2mid.csv")
write.csv(wsr_q2high, "tables/wsr_q2high.csv")
write.csv(wmw_q2low, "tables/wmw_q2low.csv")
write.csv(wmw_q2mid, "tables/wmw_q2mid.csv")
write.csv(wmw_q2high, "tables/wmw_q2high.csv")
write.csv(survivoronly_q2low, "tables/survivoronly_q2low.csv")
write.csv(survivoronly_q2mid, "tables/survivoronly_q2mid.csv")
write.csv(survivoronly_q2high, "tables/survivoronly_q2high.csv")
write.csv(diffwsrsur_q2low, "tables/diffwsrsur_q2low.csv")
write.csv(diffwsrsur_q2mid, "tables/diffwsrsur_q2mid.csv")
write.csv(diffwsrsur_q2high, "tables/diffwsrsur_q2high.csv")
write.csv(difftheory_q2low, "tables/difftheory_q2low.csv")
write.csv(difftheory_q2mid, "tables/difftheory_q2mid.csv")
write.csv(difftheory_q2high, "tables/difftheory_q2high.csv")
library(combinat)
library(flexsurv)
library(gtools)
source("C:/Users/MIN/OneDrive - SNU/문서/GitHub/Matching_WorstRank/Simulation/mvfunctions.R")
