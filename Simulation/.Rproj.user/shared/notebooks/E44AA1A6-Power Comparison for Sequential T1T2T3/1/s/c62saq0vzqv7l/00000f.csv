"0","#Define parameters "
"0","Delta = c(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6)"
"0","q2 = c(0.6, 0.8, 0.9)"
"0","HR = c(1.0, 1.2, 1.4, 1.6, 2.0, 2.4, 3.0)"
"0","time = 3"
"0","N = 5000"
"0","n = 50"
"0","rho_t = 0.8"
"0","rho_Y = 0.8"
"0","alpha = 0.05"
"0","beta = 0.025"
"0",""
"0","simulate.exp.binom <- function(n, q2, HR, time, rho_t){"
"0","  lambda2 = -1 / time * log(q2)"
"0","  lambda1 = lambda2 * HR"
"0","  #q1 = exp(-lambda1 * t)"
"0","  "
"0","  corr_t = matrix(c(1, rho_t, rho_t, 1), nrow = 2)"
"0","  t = rmvexp(n, rate=c(lambda1, lambda2), corr=corr_t)"
"0","  t1 = t[,1]"
"0","  t2 = t[,2]"
"0","  "
"0","  OnlyControlDead = sum(t1 < time & t2 >= time)"
"0","  OnlyTreatedDead = sum(t2 < time & t1 >= time)"
"0","  if (OnlyControlDead == 0 & OnlyTreatedDead == 0) return (-1); # no discordant pair"
"0","  pval = binom.test(c(OnlyControlDead, OnlyTreatedDead), alternative = ""greater"")$p.value;"
"0","  if (pval <= beta) {return (pval);}"
"0","  else { "
"0","    if (OnlyTreatedDead == 0) {pval.alt = 0;}"
"0","    else {pval.alt = binom.test(c(OnlyControlDead+1, OnlyTreatedDead-1), alternative = ""greater"")$p.value;}"
"0","    "
"0","    if (pval.alt > beta) { return (pval); }"
"0","    else {"
"0","      #cat(""prob: "", (alpha - pval.alt)/(pval - pval.alt), ""pval_alt: "", pval.alt, ""\n"");"
"0","      return (1 - rbinom(1, 1, (beta - pval.alt)/(pval - pval.alt))); # auxiliary random"
"0","    }"
"0","  }"
"0","}"
"0",""
"0","simulate.exp.both <- function(n, q2, HR, Delta, time, rho_Y, rho_t){"
"0","  lambda2 = -1 / time * log(q2)"
"0","  lambda1 = lambda2 * HR"
"0","  #q1 = exp(-lambda1 * t)"
"0","  "
"0","  corr_t = matrix(c(1, rho_t, rho_t, 1), nrow = 2)"
"0","  t = rmvexp(n, rate=c(lambda1, lambda2), corr=corr_t)"
"0","  t1 = t[,1]"
"0","  t2 = t[,2]"
"0","  "
"0","  corr_Y = matrix(c(1, rho_Y, rho_Y, 1), nrow = 2)"
"0","  Y = rmvnorm(n, mean = c(0, 2^0.5 * Delta), cov = corr_Y)"
"0","  Y1 = Y[,1]"
"0","  Y2 = Y[,2]"
"0","  "
"0","  eta = min(Y) - 1 - time - 2 *(max(Y)-min(Y)) # in order to be worst"
"0","  distmin = min(abs(Y1-Y2))/time/10 # less than minimum difference between Y1 and Y2 divided by time"
"0","  "
"0","  Y1_tilde = Y1 * (t1 >= time) + (eta + t1*distmin) * (t1 < time)"
"0","  Y2_tilde = Y2 * (t2 >= time) + (eta + t2*distmin) * (t2 < time)"
"0","  "
"0","  Y1_survivorOnly = Y1[t1 >= time & t2 >= time]"
"0","  Y2_survivorOnly = Y2[t1 >= time & t2 >= time]"
"0","  "
"0","  if (length(Y1_survivorOnly) == 0) {"
"0","    cat(""q2: "", q2, ""HR: "", HR, "", length of Y1_survivor is 0 \n"")"
"0","    return (c(-1,-1,-1))"
"0","  }"
"0","  # T2"
"0","  pval.2 = wilcox.test(Y1_tilde, Y2_tilde, alternative=""less"", paired=T)$p.value"
"0","  # T3"
"0","  pval.3 = wilcox.test(Y1_survivorOnly, Y2_survivorOnly, alternative = ""less"", paired = T)$p.value "
"0","  # T1"
"0","  OnlyControlDead = sum(t1 < time & t2 >= time)"
"0","  OnlyTreatedDead = sum(t2 < time & t1 >= time)"
"0","  if (OnlyControlDead == 0 & OnlyTreatedDead == 0) {"
"0","    cat(""q2: "", q2, ""HR: "", HR, "", no discordant pair \n"")"
"0","    return (c(-1,-1,-1)); # no discordant pair"
"0","  }"
"0","  pval = binom.test(c(OnlyControlDead, OnlyTreatedDead), alternative = ""greater"")$p.value;"
"0","  if (pval <= beta) {return (c(pval, pval.2, pval.3));}"
"0","  else { "
"0","    if (OnlyTreatedDead == 0) {pval.alt = 0;}"
"0","    else {pval.alt = binom.test(c(OnlyControlDead+1, OnlyTreatedDead-1), alternative = ""greater"")$p.value;}"
"0","    "
"0","    if (pval.alt > beta) { return (c(pval, pval.2, pval.3)); }"
"0","    else {"
"0","      #cat(""prob: "", (alpha - pval.alt)/(pval - pval.alt), ""pval_alt: "", pval.alt, ""\n"");"
"0","      return (c(1 - rbinom(1, 1, (beta - pval.alt)/(pval - pval.alt)), pval.2, pval.3)); # auxiliary random "
"0","    }"
"0","  }"
"0","}"
